const int Steps = 1000;
const float Epsilon = 0.01; // Marching epsilon
const float T=0.5;

const float rA=1.0; // Minimum ray marching distance from origin
const float rB=50.0; // Maximum

float d;
// Transforms
vec3 rotateY(vec3 p, float a)
{
   p=p*mat3(cos(a),0,sin(a),0,1,0,-sin(a),0,cos(a));
   return p;
}

vec2 hash( vec2 p ) 
{
	p = vec2( dot(p,vec2(127.1,311.7)),
			  dot(p,vec2(269.5,183.3)) );

	return -1.0 + 2.0*fract(sin(p)*43758.5453123);
}

float noise( in vec2 p )
{
    const float K1 = 0.366025404; // (sqrt(3)-1)/2;
    const float K2 = 0.211324865; // (3-sqrt(3))/6;

	vec2 i = floor( p + (p.x+p.y)*K1 );
	
    vec2 a = p - i + (i.x+i.y)*K2;
    vec2 o = step(a.yx,a.xy);    
    vec2 b = a - o + K2;
	vec2 c = a - 1.0 + 2.0*K2;

    vec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );

	vec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));

    return dot( n, vec3(70.0) );
	
}

float ridged(in vec2 p){
 float r=2.0*(0.5-abs(0.5-noise(p)));
 return r;
}

float turbulence(in vec3 p,float fo,float a,float nbOctaves){
    float somme=0.;
    float amp=.6;
    for (float i=1.0;i<=nbOctaves;i++){
    	somme=somme+amp*ridged(fo*p.xz);
        fo *= 2.;
        amp *= a;
    }
    return somme;
}



 vec2 Terrain(in vec3 p,float fo,float a,float nbOctaves) {
    float y = turbulence(p, fo, a, nbOctaves);
    	float distanceMer=y;
    if (y<-0.0){
        y=-0.0;
    }  
    float res = y-p.y;
 	if(y>1.0)
        res=1.0; 
    vec2 retour=vec2 (res,distanceMer);
    return retour;
    
}



// Smooth falloff function
// r : small radius
// R : Large radius
float falloff( float r, float R )
{
   float x = clamp(r/R,0.0,1.0);
   float y = (1.0-x*x);
   return y*y*y;
}

// Primitive functions

// Point skeleton
// p : point
// c : center of skeleton
// e : energy associated to skeleton
// R : large radius
float point(vec3 p, vec3 c, float e,float R)
{
   return e*falloff(length(p-c),R);
}


// Blending
// a : field function of left sub-tree
// b : field function of right sub-tree
float Blend(float a,float b)
{
   return a+b;
}

// Potential field of the object
// p : point
float object(vec3 p)
{
    float v = Terrain(p,0.3,0.4,5.0).x;
    d=Terrain(p,0.3,0.4,5.0).y;

   return v-T;
}

// Calculate object normal
// p : point
vec3 ObjectNormal(in vec3 p )
{
   float eps = 0.0001;
   vec3 n;
   float v = object(p);
   n.x = object( vec3(p.x+eps, p.y, p.z) ) - v;
   n.y = object( vec3(p.x, p.y+eps, p.z) ) - v;
   n.z = object( vec3(p.x, p.y, p.z+eps) ) - v;
   return normalize(n);
}

// Trace ray using ray marching
// o : ray origin
// u : ray direction
// h : hit
// s : Number of steps
float Trace(vec3 o, vec3 u, out bool h,out int s)
{
   h = false;

   // Don't start at the origin
   // instead move a little bit forward
   float t=rA;

   for(int i=0; i<Steps; i++)
   {
      s=i;
      vec3 p = o+t*u;
      float v = object(p);
      // Hit object (1) 
      if (v > 0.0)
      {
         s=i;
         h = true;
         break;
      }
      // Move along ray
      t += Epsilon;  

      // Escape marched far away
      if (t>rB)
      {
         break;
      }
   }
   return t;
}

// Background color
vec3 background(vec3 rd)
{
   return mix(vec3(0.8, 0.8, 0.9), vec3(0.6, 0.9, 1.0), rd.y*1.0+0.25);
}

// Shading and lighting
// p : point,
// n : normal at point
vec3 Shade(vec3 p, vec3 n, int s)
{
   // point light
   const vec3 lightPos = vec3(5.0, 5.0, 5.0);
   const vec3 lightColor = vec3(1.0, 1.0, 1.0);
   const vec3 lightBlack = vec3(0.0,0.0,.0);
   const vec3 Marron=vec3(.7,0.5,0.4);
    
   vec3 l = normalize(lightPos - p);
    

   // Not even Phong shading, use weighted cosine instead for smooth transitions
   float diff = 0.5*(1.0+dot(n, l));

   vec3 c =  0.5*vec3(0.5,0.5,0.5)+0.5*diff*Marron;
   float fog = 0.7*float(s)/(float(Steps-1));
   c = (1.0-fog)*c+fog*Marron;
    
    //tentative de turbulences
    	// Yplus correspond à la modififcation qu'on va appliquer à y
    float yPlus = Terrain(p,.3,0.7,4.0).x;
    
    // dégradé de couleurs
    //ecriture d'une equation de type ax+b
    //quand x=Max facteur=1
    //quand x=Min facteur=0
    float Max=.3;
    float Min=-0.5;
    float b=1.0/(1.0-(Max/Min));
    float a=-b/Min;
    float facteur=a*(p.y+yPlus)+b; // on ajoute Yplus à y pour que la valeur de la couleur en ce y soit changée
    c= facteur*c;
    vec3 newC=c;
    
    //courbes de niveau
    if(mod(p.y,0.1)<0.01){
        //equation de type ax+b pour dégrader
        //il faut que coeff=0 pour x=Min1 ->trait noir
        //et que coeff=1 pour x=Max1 -> couleur de base
    float Max1=0.01;
    float Min1=Max1/2.0;
    float b1=1.0/(1.0-(Max1/Min1));
    float a1=-b1/Min1;
    float coeff=abs(a1*mod(p.y,0.1)+b1);
    c=coeff*c;
    } 
  
    //mer à partir de l'altitude -0.5 
    if(p.y<-0.5){   
    c=vec3 (0.0,0.2,1.0); 
   
       //turbulences sur la mer 
    float zPlus = Terrain(p,mod(-iTime/10.0,10.0)+7.,0.3,2.0).x;      
        if(d<0.0 && d>-0.35){
            c=(-0.35-d)*10.0*newC+c;
            }
    float Maxi=3.5;
    float Mini=-0.9;
    float b2=(1.8-0.6*Maxi)/(1.0-(Maxi/Mini));
    float a2=0.6-b/Mini;
    float fois=a2*zPlus+b2; 
    c.z=fois*c.z;
    }
    
    
   return c;
}


void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
   vec2 pixel = (gl_FragCoord.xy / iResolution.xy)*2.0-1.0;

   // compute ray origin and direction
   float asp = iResolution.x / iResolution.y;
   vec3 rd = vec3(asp*pixel.x, pixel.y, -4.0);
   vec3 ro = vec3(0.0, 0.0, 15.0);

   vec2 mouse = iMouse.xy / iResolution.xy;
   float a=-mouse.x;//iTime*0.25;
   rd.z = rd.z+2.0*mouse.y;
   rd = normalize(rd);
   ro = rotateY(ro, a);
   rd = rotateY(rd, a);

   // Trace ray
   bool hit;

   // Number of steps
   int s;

   float t = Trace(ro, rd, hit,s);
   vec3 pos=ro+t*rd;
   // Shade background
   vec3 rgb = background(rd);

   if (hit)
   {
      // Compute normal
      vec3 n = ObjectNormal(pos);

      // Shade object with light
      rgb = Shade(pos, n, s);
   }
	
   
  
   fragColor=vec4(rgb, 1.0);
}
